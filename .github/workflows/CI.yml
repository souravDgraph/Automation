# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
     branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
        dgraphBranch:
          description: 'Dgraph Branch'     
          required: true
          default: 'release/v21.03'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    timeout-minutes:  4000

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with: 
          path: Automation_workspace
        
      - name: Setup Python
        uses: actions/setup-python@v2.2.1
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: 3.8.7 # optional, default is 3.x
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64 # optional
          # Used to pull python distributions from actions/python-versions. Since there's a default, this is typically not supplied by the user.
          token: ${{ github.token }} # optional, default is ${{ github.token }}
          
      # Navigating to the directory and installing the requirements file
#       - name: Install requirements for Dgraph and Slash
#         run: |
#           echo ${{ github.workspace }}
#           cd ${{ github.workspace }}/Automation_workspace/utilities
#           ls -alh
#           random_port=$(( ((RANDOM<<15)|RANDOM) % 49152 + 10000 ))
#           status="$(nc -z 127.0.0.1 $random_port < /dev/null &>/dev/null; echo $?)"
#           if [ "${status}" != "0" ]; then
#               echo "$random_port is free to use";
#           fi
#           python3 env_setup.py -l All -c enabled -o $random_port
      
      - name: Install requirements for Dgraph and Slash
        run: |
          echo ${{ github.workspace }}
          cd ${{ github.workspace }}/Automation_workspace/utilities
          ls -alh
          python3 env_setup.py -l All -c enabled -o 20
      
      
      # Download Dgraph Repo
      - name: Check out Dgraph repo
        uses: actions/checkout@master
        with:
          repository: dgraph-io/dgraph
          ref: ${{ github.event.inputs.dgraphBranch }}
          clean: false  
          path: dgraph_workspace  
        
          
      # Build Dgraph
      -  name: Build Dgraph
         run: |
           cd dgraph_workspace/dgraph
           make install
           export PATH=~/go/bin/:$PATH
           dgraph version
       
     # Check Config File for Dgraph
      -  name: Check dgraph execution configuration
         run: |
           echo ${{ github.workspace }}
           cd ${{ github.workspace }}/Automation_workspace
           dgraph version
           cat conf/dgraph/conf_dgraph.json
         
      - name: Run Robot Framework Testcases
        run: |
          echo ${{ github.workspace }}
          cd ${{ github.workspace }}/Automation_workspace
          mkdir -p backup
          tree
          ls
          echo " ---- Running Dgraph Testcases ----"
          export PATH=~/go/bin/:$PATH
          robot --include CI -d results/ --loglevel TRACE:INFO test_suites/dgraph/Linux/dgraph_suite_01.robot
          
          # These are commented as we do not have a fixed bearer token, once we have those we will enable the below TCs.
          # echo " ---- Running Slash Testcases ----"
          # robot test_suites/slash/slash_api/sanity.robot
          
      # Linting the Python code whenever there is a push in main branch
      - name: Python Pylint Github Action
        uses: fylein/python-pylint-github-action@v4
        if: always()
      
      
      # Getting Current time
      - name: Get current time
        uses: 1466587594/get-current-time@v2
        if: always()
        id: current-time
        with:
          format: YYYYMMDD-HH_mm_ss
          utcOffset: "+05:30"
      
      # Publish Artifacts
      - name: Use the Upload Artifact GitHub Action
        uses: actions/upload-artifact@v2
        if: always()
        with: 
          name: automationArtifact_${{ steps.current-time.outputs.formattedTime }}
          path: |
            ${{ github.workspace }}/Automation_workspace/
            !${{ github.workspace }}/Automation_workspace/test_data
            !${{ github.workspace }}/Automation_workspace/doc
        
