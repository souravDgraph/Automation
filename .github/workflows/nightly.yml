# This is a basic workflow to help you get started with Actions

name: nightly

# Controls when the action will run. 
on:
  # Triggers the workflow
  schedule:
     - cron:  '0 1 * * *'
     - cron:  '0 13 * * *' 
     

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
        dgraphBranch:
          description: 'Dgraph Branch'     
          required: true
          default: 'release/v21.03'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
 
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
#     runs-on: ubuntu-latest
#     runs-on: [self-hosted, dgin-delta]
    runs-on: [self-hosted, dgus-bravo]
    timeout-minutes:  4000
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Cleanup workspace
        run: |
          sudo rm -rf ${{ github.workspace }}/Automation_workspace/
          
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with: 
          path: Automation_workspace
        
      - name: Setup Python
        uses: actions/setup-python@v2.2.1
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: 3.8.7 # optional, default is 3.x
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64 # optional
          # Used to pull python distributions from actions/python-versions. Since there's a default, this is typically not supplied by the user.
          token: ${{ github.token }} # optional, default is ${{ github.token }}
          
      # Navigating to the directory and installing the requiremenets file
      - name: Install requirements for Dgraph and Slash
        run: |
          hostname
          hostname -I
          sudo chmod -R 777 ${{ github.workspace }}
          echo ${{ github.workspace }}
          cd ${{ github.workspace }}/Automation_workspace/utilities
          ls -alh
          sudo python3 env_setup.py -l All -c enabled -o 200
        
      - name: Configuring docker-compose file
        run: |
          echo ${{ github.workspace }}
          cd ${{ github.workspace }}/Automation_workspace/utilities
          ls -alh
          python3 create_docker_yml.py -v master -c enabled
      
      - name: Check out Dgraph repo
        uses: actions/checkout@master
        with:
          repository: dgraph-io/dgraph
          ref: ${{ github.event.inputs.dgraphBranch }} 
          clean: false  
          path: dgraph_workspace  
                              
        
      # Build Dgraph
      -  name: Build Dgraph on GitAction Runner
         run: |
           cd dgraph_workspace/dgraph
           make install
           export PATH=~/go/bin/:$PATH
           echo " ---- Checking dgraph version for agent user ----"
           dgraph version
           sudo cp /home/dg/go/bin/dgraph /usr/bin/
           echo " ---- Checking dgraph version for root user ----"
           sudo dgraph version
         
      - name: Run Robot Framework Testcases 01
        continue-on-error: true
        run: |
          echo ${{ github.workspace }}
          cd ${{ github.workspace }}/Automation_workspace
          ps -ef | grep dgraph | grep -v grep | awk '{print $2}' | sudo xargs -r kill -9
          
          # ---- Preparing 21million dataset. ----
          sed -i "s/1million/21million/g" test_suites/dgraph/Linux/dgraph_suite_01.robot
          sed -i "s/1million/21million/g" test_suites/dgraph/Linux/dgraph_suite_03.robot
          cd ./test_data/datasets
          wget -q https://github.com/dgraph-io/benchmarks/raw/master/data/21million.rdf.gz
          wget -q https://github.com/dgraph-io/benchmarks/raw/master/data/21million.schema
          zcat 21million.rdf.gz | head -n 5
          head 21million.schema
          cd ../..
          # ----------------------------------------------------------------------------------------
          
          mkdir -p backup
          #tree
          cat test_suites/dgraph/Linux/dgraph_suite_01.robot
          echo " ---- Running Dgraph Testcases 01 ----"
          sudo robot --splitlog -d results/ --loglevel TRACE:INFO test_suites/dgraph/Linux/dgraph_suite_01.robot
          sudo mv results results_01
          sudo mkdir results/
          ls
          
          # These are commented as we do not have a fixed bearer token, once we have those we will enable the below TCs.
          # echo " ---- Running Slash Testcases ----"
          # robot test_suites/slash/slash_api/sanity.robot
      
      - name: Run Robot Framework Testcases 03
        run: |
          echo ${{ github.workspace }}
          cd ${{ github.workspace }}/Automation_workspace
          ps -ef | grep dgraph | grep -v grep | awk '{print $2}' | sudo xargs -r kill -9
          
          cat test_suites/dgraph/Linux/dgraph_suite_03.robot
          echo " ---- Running Dgraph Testcases 03 ----" 
          sudo robot --splitlog -d results/ --loglevel TRACE:INFO test_suites/dgraph/Linux/dgraph_suite_03.robot
          
      # delete dgraph from root
      - name: Remove Dgraph from root
        run: |
            sudo rm -rf /usr/bin/dgraph
            
      # Getting Current time
      - name: Get current time
        uses: 1466587594/get-current-time@v2
        if: always()
        id: current-time
        with:
          format: YYYYMMDD-HH_mm_ss
          utcOffset: "+05:30"
      
#       # Publish Artifacts
#       - name: Use the Upload Artifact GitHub Action
#         uses: actions/upload-artifact@v2
#         if: always()
#         with: 
#           name: fullAutomationArtifact_${{ steps.current-time.outputs.formattedTime }}
#           path: |
#             ${{ github.workspace }}/Automation_workspace/
#             !${{ github.workspace }}/Automation_workspace/test_data
#             !${{ github.workspace }}/Automation_workspace/doc
            
      # Publish Artifacts
      - name: Use the Upload Artifact GitHub Action
        uses: actions/upload-artifact@v2
        if: always()
        with: 
          name: resultAutomationArtifact_01_${{ steps.current-time.outputs.formattedTime }}
          path: |
            ${{ github.workspace }}/Automation_workspace/results_01/
            !${{ github.workspace }}/Automation_workspace/results_01/output.xml
            !${{ github.workspace }}/Automation_workspace/results_01/p
            !${{ github.workspace }}/Automation_workspace/results_01/w
            !${{ github.workspace }}/Automation_workspace/results_01/zw
            !${{ github.workspace }}/Automation_workspace/results_01/t
            
      - name: Use the Upload Artifact GitHub Action
        uses: actions/upload-artifact@v2
        if: always()
        with: 
          name: resultAutomationArtifact_03_${{ steps.current-time.outputs.formattedTime }}
          path: |
            ${{ github.workspace }}/Automation_workspace/results/
            !${{ github.workspace }}/Automation_workspace/results/output.xml
            !${{ github.workspace }}/Automation_workspace/results/p
            !${{ github.workspace }}/Automation_workspace/results/w
            !${{ github.workspace }}/Automation_workspace/results/zw
            !${{ github.workspace }}/Automation_workspace/results/t
            
